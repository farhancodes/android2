
import android.Manifest;
import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.location.Address;
import android.location.Geocoder;
import android.os.Build;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.v4.BuildConfig;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.android.volley.AuthFailureError;
import com.android.volley.DefaultRetryPolicy;
import com.android.volley.NetworkError;
import com.android.volley.NoConnectionError;
import com.android.volley.ParseError;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.ServerError;
import com.android.volley.TimeoutError;
import com.android.volley.VolleyError;
import com.android.volley.VolleyLog;
import com.android.volley.toolbox.ImageLoader;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.NetworkImageView;
import com.android.volley.toolbox.StringRequest;
import com.android.volley.toolbox.Volley;
import com.brewfer.R;
import com.brewfer.domain.model.Model;
import com.brewfer.domain.utility.AppConstant;
import com.brewfer.presenter.helper.CustomVolleyRequestFest;
import com.brewfer.presenter.helper.PrefManager;
import com.brewfer.presenter.utility.AppConstantFest;
import com.brewfer.presenter.utility.Fragments;
import com.brewfer.presenter.utility.MyApplication;
import com.brewfer.service.GPSTracker;
import com.brewfer.view.activity.Main;
import com.facebook.AccessToken;
import com.facebook.AccessTokenTracker;
import com.facebook.CallbackManager;
import com.facebook.FacebookCallback;
import com.facebook.FacebookException;
import com.facebook.FacebookSdk;
import com.facebook.GraphRequest;
import com.facebook.GraphResponse;
import com.facebook.Profile;
import com.facebook.ProfileTracker;
import com.facebook.login.LoginManager;
import com.facebook.login.LoginResult;
import com.facebook.login.widget.LoginButton;
import com.facebook.share.internal.ShareConstants;
import com.google.android.gms.auth.api.Auth;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.auth.api.signin.GoogleSignInResult;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.Scopes;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.OptionalPendingResult;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.common.api.Status;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import de.hdodenhof.circleimageview.CircleImageView;

@SuppressLint("ValidFragment")
public class Home extends Fragment implements GoogleApiClient.OnConnectionFailedListener,
        View.OnClickListener {
    public Main main;
    private NetworkImageView profile;
    private ImageLoader imageLoader;
    SharedPreferences.Editor profile_pic_share;

    private LinearLayout skipLL;
    private Button loginBtn, SignBtn;
    private CallbackManager callbackManager;
    private AccessTokenTracker accessTokenTracker;
    private ProfileTracker profileTracker;
    private PrefManager prefManager;
    private String device_id;
    private GoogleApiClient mGoogleApiClient;
    String fb_user_name;
    private static final String TAG = "SignInActivity";
    private static final int RC_SIGN_IN = 9001;
    String profile_pic_url="";

    private GPSTracker gps;
    double latitude, longitude;

    @SuppressLint("ValidFragment")
    public Home(Main main) {
        this.main = main;
        profile=(NetworkImageView) main.findViewById(R.id.menu_profile_iv);

    }


    private FacebookCallback<LoginResult> callback = new FacebookCallback<LoginResult>() {
        @Override
        public void onSuccess(LoginResult loginResult) {
            AccessToken accessToken = loginResult.getAccessToken();
            Profile profile = Profile.getCurrentProfile();
            displayMessage(profile);
            GraphRequest request = GraphRequest.newMeRequest(loginResult.getAccessToken(), new GraphRequest.GraphJSONObjectCallback() {
                @Override
                public void onCompleted(JSONObject object, GraphResponse response) {
                    Log.i("LoginActivity", response.toString());
                    Log.i("Object", "" + object);
                    // Get facebook data from login
                    Bundle bundle = getFacebookData(object);
                    final String user_email, login_type, social_type, social_id;
                    if (fb_user_name!=null) {
                        fb_user_name = fb_user_name.replaceAll(" ", "%20");
                    }
                    Log.d("fb user name", "farhan" + fb_user_name);
                    user_email = bundle.getString("email");
                    login_type = "android";
                    device_id = prefManager.getDeviceId();
                    social_type = "facebook";
                    social_id = bundle.getString("idFacebook");

                    Log.d("devive_iddd", ""+device_id);


                    //      mem_username=farhan&mem_useremail=farhan@gmail.com&mem_login_type=ios&mem_device_type=iovcvcvxvvc&
                    // mem_social_type=facebook&mem_social_id=fb13242432434
                    String url=AppConstant.SOCIAL_LOGIN_REQUEST_URL+"mem_username="+fb_user_name+"&mem_useremail="+user_email+
                            "&mem_login_type="+login_type+"&mem_device_type="+device_id+"&mem_social_type="+social_type+"" +
                            "&mem_social_id="+social_id;
                    getLoginRequest(url);
                }
            });
            Bundle parameters = new Bundle();
            parameters.putString("fields", "id, first_name, last_name, email,gender, birthday, location"); // Par√°metros que pedimos a facebook
            request.setParameters(parameters);
            request.executeAsync();
        }

        private Bundle getFacebookData(JSONObject object) {
            Bundle bundle = null;
            try {
                bundle = new Bundle();
                String id = object.getString("id");
                // fb small profile pic url--- http://graph.facebook.com/357730144563705/picture?type=small
                URL profile_pic = new URL("https://graph.facebook.com/" + id + "/picture?width=98&height=98");
//                String profile_pic_url="https://graph.facebook.com/" + id + "/picture?width=98&height=98";

                profile_pic_url="https://graph.facebook.com/" + id + "/picture?type=small";
                imageLoader = CustomVolleyRequestFest.getInstance(getActivity()).getImageLoader();
                profile.setImageUrl(profile_pic_url,imageLoader);

                Log.i("profile_pic", profile_pic + "");
                bundle.putString("profile_pic", profile_pic.toString());
                bundle.putString("idFacebook", id);
                if (object.has("first_name"))
                    bundle.putString("first_name", object.getString("first_name"));
                Log.d("firstname", object.getString("first_name"));
                if (object.has("last_name"))
                    bundle.putString("last_name", object.getString("last_name"));
                Log.d("last_name", object.getString("last_name"));
                if (object.has("email"))
                    bundle.putString("email", object.getString("email"));
                Log.d("email", object.getString("email"));
                if (object.has("gender"))
                    bundle.putString("gender", object.getString("gender"));
                if (object.has("birthday"))
                    bundle.putString("birthday", object.getString("birthday"));
                if (object.has("location"))
                    bundle.putString("location", object.getJSONObject("location").getString("name"));
                return bundle;
            } catch (MalformedURLException e) {
                e.printStackTrace();
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return bundle;
        }


        @Override
        public void onCancel() {
            Toast.makeText(getActivity(), getResources().getString(R.string.login_canceled_facebooklogin), Toast.LENGTH_SHORT).show();
//            progress.dismiss();
        }

        @Override
        public void onError(FacebookException e) {
            Toast.makeText(getActivity(), getResources().getString(R.string.login_failed_facebooklogin), Toast.LENGTH_SHORT).show();
//            progress.dismiss();
            Log.d("loginresult",""+e);
        }
    };

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
//        FacebookSdk.sdkInitialize(getActivity().getApplicationContext());
        callbackManager = CallbackManager.Factory.create();
        accessTokenTracker = new AccessTokenTracker() {
            @Override
            protected void onCurrentAccessTokenChanged(AccessToken oldToken, AccessToken newToken) {

            }
        };
        profileTracker = new ProfileTracker() {
            @Override
            protected void onCurrentProfileChanged(Profile oldProfile, Profile newProfile) {
                displayMessage(newProfile);
            }
        };
        accessTokenTracker.startTracking();
        profileTracker.startTracking();

    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_home, container, false);

        if (isLocationPermissionGranted()) {
            gps = new GPSTracker(main);

            if (gps.canGetLocation()) {
                Log.d("statusssss", "rgf"+gps.canGetLocation());
                latitude = gps.getLatitude();
                longitude = gps.getLongitude();

                Log.d("LatLong", "lat = "+latitude+"  long = "+longitude);

                Geocoder geocoder;
                List<Address> addresses;
                geocoder = new Geocoder(main, Locale.getDefault());
                try {
                    addresses = geocoder.getFromLocation(latitude, longitude, 1); // Here 1 represent max location result to returned, by documents it recommended 1 to 5
                    Log.d("adressss", "add"+addresses);
                    if (addresses.size() > 0) {
                        String address = addresses.get(0).getAddressLine(0); // If any additional address line present than only, check with max available address lines by getMaxAddressLineIndex()
                        String city = addresses.get(0).getLocality();
                        String state = addresses.get(0).getAdminArea();
                        String country = addresses.get(0).getCountryName();
                        String postalCode = addresses.get(0).getPostalCode();
                        String knownName = addresses.get(0).getFeatureName(); // Only if available else return NULL
                        Log.d("address", "" + address);
                        Log.d("city", "" + city);
                        Log.d("state", "" + state);
                        Log.d("country", "" + country);
                        Log.d("postalCode", "" + postalCode);
                        Log.d("knownName", "" + knownName);
                        prefManager=new PrefManager(main);
                        prefManager.setCityName(city);

                        getCityId(AppConstant.CITY_ID_URL + city);
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }

            } else {
                // can't get location
                // GPS or Network is not enabled
                // Ask user to enable GPS/network in settings
                gps.showSettingsAlert();
            }
        }

        prefManager = new PrefManager(getActivity());
        profile_pic_share=main.getSharedPreferences("profile_pic", Context.MODE_PRIVATE).edit();
        skipLL = (LinearLayout) view.findViewById(R.id.skip_to_restaurant_ll);
        loginBtn = (Button) view.findViewById(R.id.home_login_btn);
        SignBtn = (Button) view.findViewById(R.id.home_signup_btn);
        Main.FRAGMENT = Fragments.FRAGMENT_HOME;
        listenerView();
        GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
                .requestEmail()
                .build();

        mGoogleApiClient = new GoogleApiClient.Builder(getActivity())
                .enableAutoManage(getActivity() /* FragmentActivity */, this /* OnConnectionFailedListener */)
                .addApi(Auth.GOOGLE_SIGN_IN_API, gso)
                .build();
        return view;
    }

    public boolean isLocationPermissionGranted() {
        if (Build.VERSION.SDK_INT >= 23) {
            if (main.checkSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION)
                    == PackageManager.PERMISSION_GRANTED) {
                Log.d("vbvbfgvbnhhhhhhhh", "Permission is granted");
                return true;
            } else {

                Log.d("zzzzzzzzzzzzz", "Permission is revoked");
                ActivityCompat.requestPermissions(main, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 1);
                return false;
            }
        } else { //permission is automatically granted on sdk<23 upon installation
            // Log.v(TAG, "Permission is granted");
            return true;
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
            Log.d("fdgdfgfg", "Permission: " + permissions[0] + "was " + grantResults[0]);
            //resume tasks needing this permission
        }
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.sign_in_button:
                signIn();
                break;

        }
    }

    private void signIn() {
        Intent signInIntent = Auth.GoogleSignInApi.getSignInIntent(mGoogleApiClient);
        startActivityForResult(signInIntent, RC_SIGN_IN);
    }
    public void onStart() {
        super.onStart();

        OptionalPendingResult<GoogleSignInResult> opr = Auth.GoogleSignInApi.silentSignIn(mGoogleApiClient);
        if (opr.isDone()) {
            // If the user's cached credentials are valid, the OptionalPendingResult will be "done"
            // and the GoogleSignInResult will be available instantly.
            Log.d(TAG, "Got cached sign-in");
            GoogleSignInResult result = opr.get();
            handleSignInResult(result);
        } else {
            // If the user has not previously signed in on this device or the sign-in has expired,
            // this asynchronous branch will attempt to sign in the user silently.  Cross-device
            // single sign-on will occur in this branch.

            opr.setResultCallback(new ResultCallback<GoogleSignInResult>() {
                @Override
                public void onResult(GoogleSignInResult googleSignInResult) {

                    handleSignInResult(googleSignInResult);
                }
            });
        }
    }
    private void handleSignInResult(GoogleSignInResult result) {
        Log.d(TAG, "handleSignInResult:" + result.isSuccess());
        if (result.isSuccess()) {
            // Signed in successfully, show authenticated UI.
            GoogleSignInAccount acct = result.getSignInAccount();
            Log.d(TAG, "handleSignInResult:" + acct.getDisplayName());
            String personName = acct.getDisplayName();
            String personGivenName = acct.getGivenName();
            String personFamilyName = acct.getFamilyName();
            String personEmail = acct.getEmail();
            String personId = acct.getId();
            if (personName != null) {
                personName = personName.replaceAll(" ", "%20");
                Log.d(Scopes.EMAIL, acct.getEmail());
                Log.d(ShareConstants.WEB_DIALOG_PARAM_NAME, BuildConfig.VERSION_NAME + personName);
                Log.d("person_id", BuildConfig.VERSION_NAME + personId);
                this.device_id = this.prefManager.getDeviceId();
                Log.d("devive_iddd", BuildConfig.VERSION_NAME + this.device_id);
                getLoginRequest("http://brewfer.com/brewfermindz/api/userapi/membersociallogin/format/json?mem_username=" + personName + "&mem_useremail=" + personEmail + "&mem_login_type=" + "android" + "&mem_device_type=" + this.device_id + "&mem_social_type=" + "facebook" + "&mem_social_id=" + personId);
                // mStatusTextView.setText(getString(R.string.signed_in_fmt, acct.getDisplayName()));
                updateUI(true);
            } else {
                // Signed out, show unauthenticated UI.
                updateUI(false);
            }
        }
    }
    private void updateUI(boolean signedIn) {
        if (signedIn) {
            // findViewById(R.id.sign_in_button).setVisibility(View.GONE);
            //findViewById(R.id.sign_out_and_disconnect).setVisibility(View.VISIBLE);
        } else {
            // mStatusTextView.setText(R.string.signed_out);

            //findViewById(R.id.sign_in_button).setVisibility(View.VISIBLE);
            // findViewById(R.id.sign_out_and_disconnect).setVisibility(View.GONE);
        }
    }
    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        LoginButton loginButton = (LoginButton) view.findViewById(R.id.login_button);
        loginButton.setReadPermissions("email");
        loginButton.setFragment(this);
        loginButton.registerCallback(callbackManager, callback);
        SignBtn=(Button) view.findViewById(R.id.home_signup_btn);
        view.findViewById(R.id.sign_in_button).setOnClickListener(this);
//        LoginManager.getInstance().logOut();

    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        callbackManager.onActivityResult(requestCode, resultCode, data);
        if (requestCode == RC_SIGN_IN) {
            Log.d("On activity","result");
            GoogleSignInResult result = Auth.GoogleSignInApi.getSignInResultFromIntent(data);
            handleSignInResult(result);
        }
    }

    private void displayMessage(Profile profile) {
        if (profile != null) {
            Log.d("profile name", profile.getName());
            fb_user_name=profile.getName();
        }
    }

    @Override
    public void onStop() {
        super.onStop();
        accessTokenTracker.stopTracking();
        profileTracker.stopTracking();
    }

    public void onDestroy() {
        super.onDestroy();
        mGoogleApiClient.stopAutoManage(getActivity());
        mGoogleApiClient.disconnect();
    }

    @Override
    public void onResume() {
        super.onResume();
        Profile profile = Profile.getCurrentProfile();
        displayMessage(profile);
        Main.mToolbar.setVisibility(View.GONE);
    }

    private void listenerView() {
        skipLL.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Main.mToolbar.setVisibility(View.GONE);
                getActivity().getSupportFragmentManager().beginTransaction()
                        .replace(R.id.framecontainer, new Dashboard(main), "Dashboard").commit();
            }
        });
        loginBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Main.mToolbar.setVisibility(View.GONE);
//                Main.changeFragment(new SignIn(main), "SignIn");
                getActivity().getSupportFragmentManager().beginTransaction()
                        .replace(R.id.framecontainer, new SignIn(main), "SignIn").commit();
            }
        });
        SignBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Main.mToolbar.setVisibility(View.GONE);
                getActivity().getSupportFragmentManager().beginTransaction()
                        .replace(R.id.framecontainer, new SignUp(main), "SignUp").commit();
            }
        });
    }

    public void getLoginRequest(String url) {
        Log.d("dkp URL",""+url);
        JsonObjectRequest jreq=new JsonObjectRequest(Request.Method.GET, url, new Response.Listener<JSONObject>() {

            @Override
            public void onResponse(JSONObject response) {
                Log.d("dkp Login response",""+response);
                if (response.length() > 0) {

                    Toast.makeText(getActivity(),"Login request process successfully",Toast.LENGTH_LONG).show();

                    String bu_id = null;
                    try {
                        bu_id = response.getString("bu_id");

                        // set email in nav drawer
                        String bu_username = response.getString("bu_username");
                        String bu_useremail =response.getString("bu_useremail");
                        Log.d("social name",""+bu_username);
                        Log.d("social email",""+bu_useremail);
                        Main.nav_user_name= (TextView) getActivity().findViewById(R.id.nav_user_name);
                        Main.nav_user_name.setText(bu_username);

                        Main.nav_user_email= (TextView) getActivity().findViewById(R.id.nav_user_email);
                        Main.nav_user_email.setText(bu_useremail);

                        Log.d("bu_id",":"+bu_id);
                        prefManager.setKeyUserId(bu_id);
                        prefManager.setKeyUserName(bu_username);
                        prefManager.setKeyUserEmail(bu_useremail);
                        // store url of profile pic
                        profile_pic_share.putString("pic_url", profile_pic_url);
                        profile_pic_share.commit();

                        getActivity().getSupportFragmentManager().beginTransaction()
                                .replace(R.id.framecontainer, new Dashboard(main), "Dashboard").commit();
//                        prefManager.createLogin(bu_id, bu_username, bu_useremail, bu_password, bu_usercontact,bu_status,bu_createdon,bu_isdelete);

                        Auth.GoogleSignInApi.signOut(mGoogleApiClient).setResultCallback(
                                new ResultCallback<Status>() {
                                    @Override
                                    public void onResult(Status status) {
                                        // ...
                                    }
                                });
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }

                } else {
                    Model.ShowToast(getActivity(), "Sorry no more data available!!! ");
                }

            }
        }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {

                if (error instanceof TimeoutError || error instanceof NoConnectionError) {
                    Log.d("error ocurred", "TimeoutError");
                    Toast.makeText(getActivity(), "TimeoutError", Toast.LENGTH_LONG).show();
                } else if (error instanceof AuthFailureError) {
                    Log.d("error ocurred", "AuthFailureError");
                    Toast.makeText(getActivity(), "AuthFailureError", Toast.LENGTH_LONG).show();
                } else if (error instanceof ServerError) {
                    Log.d("error ocurred", "ServerError");
                    Toast.makeText(getActivity(), "Please enter valid email or password", Toast.LENGTH_LONG).show();
                    // Toast.makeText(getActivity(), "ServerError", Toast.LENGTH_LONG).show();
                } else if (error instanceof NetworkError) {
                    Log.d("error ocurred", "NetworkError");
                    Toast.makeText(getActivity(), "NetworkError", Toast.LENGTH_LONG).show();
                } else if (error instanceof ParseError) {
                    Log.d("error ocurred", "ParseError");
                    Toast.makeText(getActivity(), "ParseError", Toast.LENGTH_LONG).show();
                }
            }
        });

        MyApplication.getInstance().addToRequestQueue(jreq, "jreq");
    }

    public void getCityId(String url) {
        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(Request.Method.GET, url, new Response.Listener<JSONObject>() {
            @Override
            public void onResponse(JSONObject response) {
                if (response.length() > 0) {
                    try {
                        if (response.has("cityid")) {
                            String city_id = response.getString("cityid");
                            prefManager.setCityId(city_id);
                        } else {

                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }

            }
        }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {

            }
        });
        MyApplication.getInstance().addToRequestQueue(jsonObjectRequest, "jOR");
    }

    @Override
    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {

    }
}

